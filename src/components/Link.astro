---
interface Props {
  href: string;
  icon?: string;
  title: string;
  isHeading?: boolean;
  background?: string;
  backgroundGradient?: {
    background: string;
    backgroundSize: string;
    backgroundPosition: string;
  };
  iconColor?: string;
  preserveColors?: boolean;
}

const {
  href,
  icon,
  title,
  isHeading = false,
  background = "#222222",
  backgroundGradient,
  iconColor = "#fefefe",
  preserveColors = false,
} = Astro.props;

const styles = backgroundGradient ? backgroundGradient : { background };

const icons: Record<string, string> = import.meta.glob(
  "../assets/icons/*.svg",
  {
    query: "?raw",
    import: "default",
    eager: true,
  }
);

let svgContent = null;
if (icon) {
  const rawSvg = icons[`../assets/icons/${icon.split("/").pop()}`];
  if (preserveColors) {
    svgContent = rawSvg.replace(/(<svg[^>]*)(?:width|height)="[^"]*"/g, "$1");
  } else {
    svgContent = rawSvg
      .replace(/(<svg[^>]*)(?:width|height)="[^"]*"/g, "$1")
      .replace(/fill="[^"]+"/g, '')
      .replace('<svg', `<svg fill="currentColor"`);
  }
}

const isDark = (color: string) => {
  // Handle hex colors
  if (color.startsWith("#")) {
    const r = parseInt(color.slice(1, 3), 16);
    const g = parseInt(color.slice(3, 5), 16);
    const b = parseInt(color.slice(5, 7), 16);
    return r * 0.299 + g * 0.587 + b * 0.114 < 50;
  }
  // Handle named colors
  if (color === "black") return true;
  return false;
};
---

{
  isHeading ? (
    <div class="w-full max-w-sm mx-2 my-2">
      <h2 class="text-2xl font-bold text-white flex items-center">{title}</h2>
    </div>
  ) : (
    <a
      href={href}
      class="flex items-center gap-3 w-[18rem] p-3 mb-3 font-semibold text-lg rounded-xl shadow-sm transition-all hover:-translate-y-1 hover:shadow-[0_0_20px_var(--glow-color)]"
      style={{
        ...styles,
        "--glow-color": backgroundGradient
          ? backgroundGradient.background.match(/rgb\([^)]+\)/)?.[0]
          : background.includes("gradient")
            ? background.match(/rgb\([^)]+\)/)?.[0]
            : isDark(background)
              ? iconColor
              : background,
      }}
      rel="noopener noreferrer"
      target="_blank"
    >
      {svgContent && (
        <div
          class="w-6 h-6 flex items-center [&>svg]:w-full [&>svg]:h-full"
          style={preserveColors ? undefined : `color: ${iconColor}`}
        >
          <Fragment set:html={svgContent} />
        </div>
      )}
      <span style={`color: ${iconColor}`}>{title}</span>
    </a>
  )
}
